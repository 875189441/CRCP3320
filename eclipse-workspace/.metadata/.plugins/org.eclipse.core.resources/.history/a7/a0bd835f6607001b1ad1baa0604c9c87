import java.util.ArrayList;
import java.util.List;
public class MarkovOrder<T> extends MarkovGenerator<T> {
	int orderM;
	ArrayList<ArrayList<ArrayList<T>>> uniqueSequence = new ArrayList<ArrayList<T>>();
	ArrayList<ArrayList<T>> container = new ArrayList<ArrayList<T>>();//container
	ArrayList<Integer> getRow = new ArrayList<Integer>();
	/*
	for i = orderM -1 to (i < size of the input - 1) do
	{
				
		1.	Create the current sequence (eg. curSequence) of size orderM from the input
		Remember to start the index into the input at 0 (with this algorithm) 
			a.	add the previous tokens to a container (eg ArrayList). 
			b.	You may do this in a for-loop or use .subList()
				i.	https://beginnersbook.com/2013/12/how-to-get-sublist-of-an-arraylist-with-example/
					
		2.	Find  curSequence in uniqueAlphabetSequences
		if curSequence is not found
		{
			1. set rowIndex to the size of uniqueAlphabetSequences
					
			2. add the curSequence to uniqueAlphabetSequences

			3. add a new row to the transition table the size of the alphabet
		}

		3.	Find the current next token (tokenIndex)
		{
			tokenIndex = the next index of the token in the alphabet (i+1)
				
			if tokenIndex is not found in the alphabet
			{
				1. tokenIndex = size of the alphabet 
				2. add the token to the alphabet
				3. expand transitionTable horizontally
			}
		}
				
		4.	Update the counts â€“ since we started after the beginning, rowIndex will not be -1
			a.	Get the row using rowIndex
			b.	Get the column using tokenIndex
			c.	Add one to that value retrieved from the transition table
	}*/

	
	
	
	
	
	
	
	
	public void train(ArrayList<T> newTokens) {
		//for (int i= orderM -1;i<=newTokens.size()-1;i++) {
			//for(int k=0;k<orderM;k++) {
				//container.get(k).add(newTokens.get(i));
		boolean found =true;
		int RowIndex=0;
		//sequence will be the container 
				container.subList(orderM, newTokens.size());
				
		for (int x=0;x<uniqueSequence.size();x++)	{
		
			
			if (!found) {
				RowIndex=uniqueSequence.size();
				uniqueSequence.add(container);
				ArrayList<Integer> nRow = new ArrayList<Integer>();
				for(int y=0;y<alphabet.size();y++) {
					nRow.add(0);
				}
				transitionTable.add(nRow);
			}
			
		}for (int z=0;z<alphabet.size();z++ ) {
			tokenIn= alphabet.indexOf(newTokens.get(z+1));
			
			if (tokenIn==-1) {
				tokenIn=alphabet.size();
				alphabet.add(newTokens.get(z));
				for(int j=0;j<transitionTable.size();j++) {
					transitionTable.get(j).add(0);
				}
			}
		}
		if(RowIndex!=-1) {
			getRow=transitionTable.get(RowIndex);
			getRow.set(tokenIn, getRow.get(tokenIn) + 1);
			
		}
	}
}
