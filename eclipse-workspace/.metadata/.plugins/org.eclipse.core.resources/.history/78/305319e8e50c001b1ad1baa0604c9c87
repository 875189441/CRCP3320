import java.util.ArrayList;
import java.util.List;
public class MarkovOrder<T> extends MarkovGenerator<T> {
	int orderM;
	ArrayList<ArrayList<T>> uniqueSequence = new ArrayList();
	ArrayList<T> container= new ArrayList();
	ArrayList<Integer> getRow = new ArrayList<Integer>();
	ArrayList<Float> newProbability = new ArrayList<Float>();
	/*
	for i = orderM -1 to (i < size of the input - 1) do
	{
				
		1.	Create the current sequence (eg. curSequence) of size orderM from the input
		Remember to start the index into the input at 0 (with this algorithm) 
			a.	add the previous tokens to a container (eg ArrayList). 
			b.	You may do this in a for-loop or use .subList()
				i.	https://beginnersbook.com/2013/12/how-to-get-sublist-of-an-arraylist-with-example/
					
		2.	Find  curSequence in uniqueAlphabetSequences
		if curSequence is not found
		{
			1. set rowIndex to the size of uniqueAlphabetSequences
					
			2. add the curSequence to uniqueAlphabetSequences

			3. add a new row to the transition table the size of the alphabet
		}

		3.	Find the current next token (tokenIndex)
		{
			tokenIndex = the next index of the token in the alphabet (i+1)
				
			if tokenIndex is not found in the alphabet
			{
				1. tokenIndex = size of the alphabet 
				2. add the token to the alphabet
				3. expand transitionTable horizontally
			}
		}
				
		4.	Update the counts â€“ since we started after the beginning, rowIndex will not be -1
			a.	Get the row using rowIndex
			b.	Get the column using tokenIndex
			c.	Add one to that value retrieved from the transition table
	}*/
	
	public void train(ArrayList<T> newTokens) {
		
		for(int i=orderM -1; i<newTokens.size()-1;i++) {
			int tokenIn=0;
			int RowIndex=0;
		
				
		for (int x=0;x<orderM-1;x++)	{
			container.add(newTokens.get(x));
		}
		RowIndex = uniqueSequence.indexOf(container);
			
			if (RowIndex==-1) {
				RowIndex=uniqueSequence.size();
				uniqueSequence.add(container);
				ArrayList<Integer> nRow = new ArrayList<Integer>();
				for(int y=0;y<alphabet.size();y++) {
					nRow.add(0);
				}
				transitionTable.add(nRow);
			}
			
		
			tokenIn= alphabet.indexOf(newTokens.get(i+1));
			
			if (tokenIn==-1) {
				tokenIn=alphabet.size();
				alphabet.add(newTokens.get(i+1));
				for(int j=0;j<transitionTable.size();j++) {
					transitionTable.get(j).add(0);
				}
			}
		
		if(RowIndex!=-1) {
			getRow=transitionTable.get(RowIndex);
			getRow.set(tokenIn, getRow.get(tokenIn) + 1);
			
		}
	}
		print();
}
	public void print() {
		for(int i = 0; i < uniqueSequence.size(); i++) {
			
			System.out.println(alphabet);
			System.out.println(newProbability);
		}
	}
	public void prob(ArrayList<Integer> uniqueSequence, int index) {
		float total = 0;		
		for(int i = 0; i < uniqueSequence.size(); i++) {
			total = (float) uniqueSequence.get(i) + total; 			
		}
		if(total == 0) {
			index=-1;
			for(int i = 0; i < uniqueSequence.size(); i++) {
				newProbability.set(i, (float) 0);	
			}
		}
		else {
			newProbability.clear();
			for(int j = 0; j < uniqueSequence.size(); j++) {
				newProbability.add(((float) uniqueSequence.get(j) / total)); 				
			}
		}

	}
}